     1                                  ; =======================================================================
     2                                  ; int myprintf(const char *format, ...)
     3                                  ; Supported specifiers (case sensitive!):
     4                                  ;   - %% - just one character '%'                           - no arg;
     5                                  ;   - %c - one character                                    - uint8_t 
     6                                  ;   - %s - C-string                                         - const char *
     7                                  ;   - %d - decimal integer                                  - int32_t
     8                                  ;   - %x - hex integer                                      - uint32_t
     9                                  ;   - %o - octal integer                                    - uint32_t
    10                                  ;   - %b - binary integer                                   - uint32_t
    11                                  ;   - %n - puts num of already written chars by given ptr   - int * 
    12                                  ; Use of registers (throughot the whole func):
    13                                  ;   - eax - num of written chars (is returned)
    14                                  ;   - rdi - points at the current char in the format string
    15                                  ;   - rbp - base in stack to access arranged arguments
    16                                  ;   - r11 - index in the buffer of func 'print_char'
    17                                  ;   
    18                                  ; =======================================================================
    19                                  
    20                                  %define GLOBAL_FUNC_NAME my_printf
    21                                  %define CHARBUF_SIZE 16
    22                                  
    23                                  global GLOBAL_FUNC_NAME
    24                                  section .text
    25                                  
    26                                  GLOBAL_FUNC_NAME:
    27                                              ; ============================================    
    28                                              ; preparing stack frame, so that all POTENTIAL
    29                                              ; arguments are located in order in stack
    30                                  
    31 00000000 415A                                pop r10 ; saving ret code
    32                                  
    33                                              ; pushing POTENTIAL arguments in reverse order
    34 00000002 4151                                push r9
    35 00000004 4150                                push r8
    36 00000006 51                                  push rcx
    37 00000007 52                                  push rdx
    38 00000008 56                                  push rsi
    39                                  
    40 00000009 4989E3                              mov r11, rsp ; saving reference stack pointer
    41                                  
    42 0000000C 4152                                push r10 ; pushing ret code
    43                                  
    44                                              ; ============================================
    45 0000000E 53                                  push rbx
    46 0000000F 55                                  push rbp
    47 00000010 4154                                push r12
    48                                  
    49 00000012 4C89DD                              mov rbp, r11 ; now r11 is free
    50                                  
    51                                              ; before first call of print_char
    52 00000015 31C0                                xor eax, eax
    53 00000017 4D31DB                              xor r11, r11
    54 0000001A 4D31D2                              xor r10, r10
    55                                  
    56                                              ; =====================================
    57                                              ; main loop
    58 0000001D 448A17                  main_loop:  mov r10b, [rdi]
    59 00000020 48FFC7                              inc rdi
    60                                              
    61 00000023 4180FA25                            cmp r10b, '%'
    62 00000027 740D                                je specf
    63                                              
    64                                              ; common char or 0x0
    65 00000029 E81F000000                          call print_char
    66                                  
    67 0000002E 4180FA00                            cmp r10b, 0x0
    68 00000032 75E9                                jne main_loop
    69 00000034 EB0A                                jmp printf_end
    70                                              ; ---------------
    71                                              ; specf
    72 00000036 448A17                  specf:      mov r10b, [rdi]
    73 00000039 48FFC7                              inc rdi
    74 0000003C EB59                                jmp hndl_specf
    75                                              ; ------------------------------------
    76                                              ; back to loop, if not 0x0
    77                                  hndl_specf_end:
    78 0000003E EBDD                                jmp main_loop
    79                                              ; =====================================
    80                                              ; end of main_loop
    81                                  printf_end: 
    82                                   
    83 00000040 415C                                pop r12
    84 00000042 5D                                  pop rbp
    85 00000043 5B                                  pop rbx
    86                                  
    87                                              ; ======================================
    88                                              ; fixig stack frame and ret
    89                                  
    90 00000044 415B                                pop r11         ; popping ret code
    91 00000046 4883C428                            add rsp, 5*8    ; throwing out potential register args
    92 0000004A 4153                                push r11        ; ret code
    93 0000004C C3                                  ret
    94                                  
    95                                  ; =======================================================================
    96                                  ; print_char
    97                                  ; Description:
    98                                  ;   Gets one char, stores it into internal buffer. When it's full, calls
    99                                  ;   syscall write to stdout and resets the buffer. If given char is zero 
   100                                  ;   byte ('\0'), doesn't store it and flushes buffer immediately. 
   101                                  ;   Increments number of written bytes (see args) or sets it to -1 in 
   102                                  ;   case of writing error.
   103                                  ; Args:
   104                                  ;   - r10b - char to store to buffer and print.
   105                                  ;   - eax  - stores number of already written bytes here, or sets it to -1
   106                                  ;           in case of error. Must be set to 0 before first call of 
   107                                  ;           this func.
   108                                  ; Expects: 
   109                                  ;   - r11 - index in the buffer, must be set to 0 before first call of 
   110                                  ;           this func; must not be changed outside of this func.
   111                                  ; =======================================================================
   112                                  print_char:
   113 0000004D 4180FA00                            cmp r10b, 0x0
   114 00000051 7416                                je flush_buf
   115                                  
   116 00000053 83F8FF                              cmp eax, -1     ; check if error already happened
   117 00000056 7410                                je prn_chr_ret
   118                                  
   119 00000058 458893[00000000]                    mov [charbuf + r11], r10b
   120 0000005F 49FFC3                              inc r11
   121                                  
   122 00000062 4983FB10                            cmp r11, CHARBUF_SIZE
   123 00000066 7401                                je flush_buf
   124                                              
   125                                  prn_chr_ret:
   126 00000068 C3                                  ret
   127                                  
   128                                  flush_buf:  
   129 00000069 57                                  push rdi
   130 0000006A 56                                  push rsi
   131 0000006B 52                                  push rdx
   132 0000006C 50                                  push rax 
   133                                  
   134 0000006D 4C89DA                              mov rdx, r11            ; num of bytes to write
   135 00000070 B801000000                          mov rax, 0x1            ; syscall number - write
   136 00000075 BF01000000                          mov rdi, 0x1            ; stdout
   137 0000007A 488D3425[00000000]                  lea rsi, [charbuf]      ; buffer pointer
   138 00000082 0F05                                syscall
   139                                  
   140                                              ; now eax stores -1 or number of written bytes
   141 00000084 83F8FF                              cmp eax, -1
   142 00000087 7406                                je prn_chr_end
   143 00000089 030424                              add eax, [rsp] ; adding to eax its previous value 
   144                                  
   145 0000008C 4D31DB                              xor r11, r11
   146                                  
   147                                  prn_chr_end: 
   148                                              ; if eax equals -1, it must be -1 still; otherwise
   149                                              ; it already has the needed value
   150 0000008F 4883C408                            add rsp, 0x8    ; skipping eax
   151                                  
   152 00000093 5A                                  pop rdx 
   153 00000094 5E                                  pop rsi
   154 00000095 5F                                  pop rdi
   155 00000096 C3                                  ret
   156                                  
   157                                  ; =======================================================================
   158                                  ; hndl_specf - DON'T USE CALL, USE JMP
   159                                  ; Description:
   160                                  ;   Handles situation when specifier like '%S' is met in the format 
   161                                  ;   string. 'S' fully specifier which specifier it is.
   162                                  ; Supported specifiers (case sensitive!):
   163                                  ;   - %% - just one character '%'                           - no arg;
   164                                  ;   - %c - one character                                    - uint8_t 
   165                                  ;   - %s - C-string                                         - const char *
   166                                  ;   - %d - decimal integer                                  - int32_t
   167                                  ;   - %x - hex integer                                      - uint32_t
   168                                  ;   - %o - octal integer                                    - uint32_t
   169                                  ;   - %b - binary integer                                   - uint32_t
   170                                  ;   - %n - puts num of already written chars by given ptr   - int * 
   171                                  ; Arguments:
   172                                  ;   - r10   - the character 'S' (see description)
   173                                  ; Expects:
   174                                  ;   - rbp - to point at the next to be used argument in stack 
   175                                  ;           (considering all args as 8 bytes)
   176                                  ; ATTENTION:
   177                                  ;   Nothing happens if the specifier is not identified.
   178                                  ; =======================================================================
   179                                  hndl_specf:
   180                                  %define SPECF_SMALLEST 'b' ; specifier with the smallest ascii value
   181                                  %define SPECF_BIGGEST  'x' ; specifier with the biggest ascii value
   182                                  
   183 00000097 4180FA25                            cmp r10b, '%'           ; doesn't need arg, handled separately
   184 0000009B 741A                                je specf_perc
   185                                  
   186 0000009D 4180FA78                            cmp r10b, SPECF_BIGGEST ; if unrecognized, skip
   187 000000A1 779B                                ja hndl_specf_end       
   188                                  
   189                                              ; all the rest need an arg, getting it into rsi
   190 000000A3 488B7500                            mov rsi, [rbp]
   191 000000A7 4883C508                            add rbp, 0x8
   192                                  
   193                                              ; jmp to corresponding specifier handler
   194 000000AB 4180EA62                            sub r10b, SPECF_SMALLEST
   195 000000AF 42FF24D5[18000000]                  jmp [jmp_table + r10*8]
   196                                  
   197                                              ; treating '%%' specially
   198 000000B7 E891FFFFFF              specf_perc: call print_char ; just print '%', which is already in the r10b 
   199 000000BC EB80                                jmp hndl_specf_end
   200                                  
   201                                              ; there is no ret, because every specifier handler jmps to
   202                                              ; label 'hndl_specf_end', which is located in the main loop
   203                                  ; =======================================================================
   204                                  ; Specifiers handlers. 
   205                                  ; Expects:
   206                                  ;    Each of them expects the argument to be in rsi.
   207                                  ; ==========================================================================
   208                                  ; Macro for converting & printing, supports BIN, HEX (AND POTENTIALLY BASE 4)
   209                                  ; Macro argumets:
   210                                  ;   %1) number of bits to represent one digit (1 for BIN, 4 for HEX, etc)
   211                                  ;   %2) BIN | HEX
   212                                  ; Expects:
   213                                  ;   Number to convert and print in esi
   214                                  ; ==========================================================================
   215                                  %macro      ConvertBH 2
   216                                  
   217                                              xor ebx, ebx
   218                                  
   219                                              ; skipping leading zeroes
   220                                              mov ecx, 32 / %1
   221                                  %%nzero:    rol esi, %1
   222                                              mov bl, sil
   223                                              and bl, (1 << %1) - 1
   224                                              cmp bl, 0
   225                                              loope %%nzero
   226                                  
   227                                              jz %%num_0    ; the number to print is zero, special case
   228                                              ror esi, %1
   229                                              inc ecx
   230                                  
   231                                  %%loop:     rol esi, %1
   232                                              mov bl, sil
   233                                              and bl, (1 << %1) - 1
   234                                              mov r10b, [%2 + rbx]
   235                                              mov r12, rcx ; saving
   236                                              call print_char
   237                                              mov rcx, r12  
   238                                              loop %%loop
   239                                  
   240                                              jmp hndl_specf_end ; instead of ret
   241                                  
   242                                              ; if the number to print is 0
   243                                  %%num_0:    mov r10b, [%2]
   244                                              call print_char
   245                                  
   246                                              jmp hndl_specf_end ; instead of ret
   247                                  
   248                                  %endmacro
   249                                  ; ==========================================================================
   250                                  ; Macro for converting into bases [2, 10]
   251                                  ; Macro argumets:
   252                                  ;   %1) the base: 2, or 3, or 4... or 10
   253                                  ; Expects:
   254                                  ;   Number to convert and print in esi
   255                                  ; ==========================================================================
   256                                  %macro      ConvertCmn 1
   257                                              mov r12, rax    ; saving
   258                                  
   259                                              ; --------------------------------------------------------------
   260                                              ; if the base is 10 and number < 0, print '-' and convert
   261                                  %if %1 == 10
   262                                              test esi, 1 << 31
   263                                              jz %%skip_abs
   264                                              mov r10b, '-'
   265                                              call print_char
   266                                              neg esi
   267                                  %endif
   268                                  
   269                                  %%skip_abs: 
   270                                              xor rdx, rdx
   271                                              ;xor rax, rax
   272                                              mov eax, esi
   273                                              mov ebx, %1 ; because div doesn't support immc
   274                                              xor rcx, rcx
   275                                  
   276                                  %%loop_fw:  div ebx
   277                                              push rdx
   278                                              inc rcx
   279                                              xor rdx, rdx
   280                                              cmp eax, 0
   281                                              jne %%loop_fw
   282                                              
   283                                              mov rax, r12 ; restoring rax
   284                                  
   285                                  %%loop_bw:  pop r10
   286                                              add r10, '0'
   287                                              mov r12, rcx    ; saving
   288                                              call print_char
   289                                              mov rcx, r12
   290                                              loop %%loop_bw
   291                                  
   292                                  %endmacro
   293                                  ; ==========================================================================
   294                                  specf_b:    ConvertBH 1, BIN
   294                              <1> specf_b: 
   216                              <1> 
   217 000000BE 31DB                <1>  xor ebx, ebx
   218                              <1> 
   219                              <1> 
   220 000000C0 B920000000          <1>  mov ecx, 32 / %1
   221 000000C5 D1C6                <1> %%nzero: rol esi, %1
   222 000000C7 4088F3              <1>  mov bl, sil
   223 000000CA 80E301              <1>  and bl, (1 << %1) - 1
   224 000000CD 80FB00              <1>  cmp bl, 0
   225 000000D0 E1F3                <1>  loope %%nzero
   226                              <1> 
   227 000000D2 7425                <1>  jz %%num_0
   228 000000D4 D1CE                <1>  ror esi, %1
   229 000000D6 FFC1                <1>  inc ecx
   230                              <1> 
   231 000000D8 D1C6                <1> %%loop: rol esi, %1
   232 000000DA 4088F3              <1>  mov bl, sil
   233 000000DD 80E301              <1>  and bl, (1 << %1) - 1
   234 000000E0 448A93[10000000]    <1>  mov r10b, [%2 + rbx]
   235 000000E7 4989CC              <1>  mov r12, rcx
   236 000000EA E85EFFFFFF          <1>  call print_char
   237 000000EF 4C89E1              <1>  mov rcx, r12
   238 000000F2 E2E4                <1>  loop %%loop
   239                              <1> 
   240 000000F4 E945FFFFFF          <1>  jmp hndl_specf_end
   241                              <1> 
   242                              <1> 
   243 000000F9 448A1425[10000000]  <1> %%num_0: mov r10b, [%2]
   244 00000101 E847FFFFFF          <1>  call print_char
   245                              <1> 
   246 00000106 E933FFFFFF          <1>  jmp hndl_specf_end
   247                              <1> 
   295                                  
   296 0000010B E92EFFFFFF                          jmp hndl_specf_end ; instead of ret
   297                                  ; ==========================================================================
   298 00000110 4188F2                  specf_c:    mov r10b, sil
   299 00000113 E835FFFFFF                          call print_char
   300 00000118 E921FFFFFF                          jmp hndl_specf_end ; instead of ret
   301                                  ; ==========================================================================
   302                                  specf_d:    ConvertCmn 10
   302                              <1> specf_d: 
   257 0000011D 4989C4              <1>  mov r12, rax
   258                              <1> 
   259                              <1> 
   260                              <1> 
   261                              <1> %if %1 == 10
   262 00000120 F7C600000080        <1>  test esi, 1 << 31
   263 00000126 740A                <1>  jz %%skip_abs
   264 00000128 41B22D              <1>  mov r10b, '-'
   265 0000012B E81DFFFFFF          <1>  call print_char
   266 00000130 F7DE                <1>  neg esi
   267                              <1> %endif
   268                              <1> 
   269                              <1> %%skip_abs:
   270 00000132 4831D2              <1>  xor rdx, rdx
   271                              <1> 
   272 00000135 89F0                <1>  mov eax, esi
   273 00000137 BB0A000000          <1>  mov ebx, %1
   274 0000013C 4831C9              <1>  xor rcx, rcx
   275                              <1> 
   276 0000013F F7F3                <1> %%loop_fw: div ebx
   277 00000141 52                  <1>  push rdx
   278 00000142 48FFC1              <1>  inc rcx
   279 00000145 4831D2              <1>  xor rdx, rdx
   280 00000148 83F800              <1>  cmp eax, 0
   281 0000014B 75F2                <1>  jne %%loop_fw
   282                              <1> 
   283 0000014D 4C89E0              <1>  mov rax, r12
   284                              <1> 
   285 00000150 415A                <1> %%loop_bw: pop r10
   286 00000152 4983C230            <1>  add r10, '0'
   287 00000156 4989CC              <1>  mov r12, rcx
   288 00000159 E8EFFEFFFF          <1>  call print_char
   289 0000015E 4C89E1              <1>  mov rcx, r12
   290 00000161 E2ED                <1>  loop %%loop_bw
   291                              <1> 
   303                                  
   304 00000163 E9D6FEFFFF                          jmp hndl_specf_end
   305                                  ; ==========================================================================
   306                                  specf_o:    ConvertCmn 8
   306                              <1> specf_o: 
   257 00000168 4989C4              <1>  mov r12, rax
   258                              <1> 
   259                              <1> 
   260                              <1> 
   261                              <1> %if %1 == 10
   262                              <1>  test esi, 1 << 31
   263                              <1>  jz %%skip_abs
   264                              <1>  mov r10b, '-'
   265                              <1>  call print_char
   266                              <1>  neg esi
   267                              <1> %endif
   268                              <1> 
   269                              <1> %%skip_abs:
   270 0000016B 4831D2              <1>  xor rdx, rdx
   271                              <1> 
   272 0000016E 89F0                <1>  mov eax, esi
   273 00000170 BB08000000          <1>  mov ebx, %1
   274 00000175 4831C9              <1>  xor rcx, rcx
   275                              <1> 
   276 00000178 F7F3                <1> %%loop_fw: div ebx
   277 0000017A 52                  <1>  push rdx
   278 0000017B 48FFC1              <1>  inc rcx
   279 0000017E 4831D2              <1>  xor rdx, rdx
   280 00000181 83F800              <1>  cmp eax, 0
   281 00000184 75F2                <1>  jne %%loop_fw
   282                              <1> 
   283 00000186 4C89E0              <1>  mov rax, r12
   284                              <1> 
   285 00000189 415A                <1> %%loop_bw: pop r10
   286 0000018B 4983C230            <1>  add r10, '0'
   287 0000018F 4989CC              <1>  mov r12, rcx
   288 00000192 E8B6FEFFFF          <1>  call print_char
   289 00000197 4C89E1              <1>  mov rcx, r12
   290 0000019A E2ED                <1>  loop %%loop_bw
   291                              <1> 
   307                                  
   308 0000019C E99DFEFFFF                          jmp hndl_specf_end
   309                                  ; ==========================================================================
   310                                  specf_s:    
   311 000001A1 448A16                  sp_s_loop:  mov r10b, [rsi]
   312 000001A4 48FFC6                              inc rsi
   313 000001A7 E8A1FEFFFF                          call print_char
   314 000001AC 4180FA00                            cmp r10b, 0x0
   315 000001B0 75EF                                jne sp_s_loop
   316                                  
   317 000001B2 E987FEFFFF                          jmp hndl_specf_end
   318                                  ; ==========================================================================
   319                                  specf_x:    ConvertBH 4, HEX
   319                              <1> specf_x: 
   216                              <1> 
   217 000001B7 31DB                <1>  xor ebx, ebx
   218                              <1> 
   219                              <1> 
   220 000001B9 B908000000          <1>  mov ecx, 32 / %1
   221 000001BE C1C604              <1> %%nzero: rol esi, %1
   222 000001C1 4088F3              <1>  mov bl, sil
   223 000001C4 80E30F              <1>  and bl, (1 << %1) - 1
   224 000001C7 80FB00              <1>  cmp bl, 0
   225 000001CA E1F2                <1>  loope %%nzero
   226                              <1> 
   227 000001CC 7427                <1>  jz %%num_0
   228 000001CE C1CE04              <1>  ror esi, %1
   229 000001D1 FFC1                <1>  inc ecx
   230                              <1> 
   231 000001D3 C1C604              <1> %%loop: rol esi, %1
   232 000001D6 4088F3              <1>  mov bl, sil
   233 000001D9 80E30F              <1>  and bl, (1 << %1) - 1
   234 000001DC 448A93[00000000]    <1>  mov r10b, [%2 + rbx]
   235 000001E3 4989CC              <1>  mov r12, rcx
   236 000001E6 E862FEFFFF          <1>  call print_char
   237 000001EB 4C89E1              <1>  mov rcx, r12
   238 000001EE E2E3                <1>  loop %%loop
   239                              <1> 
   240 000001F0 E949FEFFFF          <1>  jmp hndl_specf_end
   241                              <1> 
   242                              <1> 
   243 000001F5 448A1425[00000000]  <1> %%num_0: mov r10b, [%2]
   244 000001FD E84BFEFFFF          <1>  call print_char
   245                              <1> 
   246 00000202 E937FEFFFF          <1>  jmp hndl_specf_end
   247                              <1> 
   320                                  
   321 00000207 E932FEFFFF                          jmp hndl_specf_end ; instead of ret
   322                                  ; ==========================================================================
   323 0000020C 41B200                  specf_n:    mov r10b, 0x0   ; flush buf
   324 0000020F E839FEFFFF                          call print_char
   325                                  
   326 00000214 8906                                mov [rsi], eax
   327                                  
   328 00000216 E923FEFFFF                          jmp hndl_specf_end ; instead of ret
   329                                  ; ==========================================================================
   330                                  section .rodata
   331 00000000 303132333435363738-     HEX:        db '0123456789ABCDEF' 
   331 00000009 39414243444546     
   332 00000010 3031                    BIN:        db '01'
   333                                  
   334 00000012 90<rep 6h>              align 8
   335                                  jmp_table:
   336 00000018 [BE00000000000000]      dq specf_b
   337 00000020 [1001000000000000]      dq specf_c
   338 00000028 [1D01000000000000]      dq specf_d
   339 00000030 [3E00000000000000]      dq hndl_specf_end
   340 00000038 [3E00000000000000]      dq hndl_specf_end
   341 00000040 [3E00000000000000]      dq hndl_specf_end
   342 00000048 [3E00000000000000]      dq hndl_specf_end
   343 00000050 [3E00000000000000]      dq hndl_specf_end
   344 00000058 [3E00000000000000]      dq hndl_specf_end
   345 00000060 [3E00000000000000]      dq hndl_specf_end
   346 00000068 [3E00000000000000]      dq hndl_specf_end
   347 00000070 [3E00000000000000]      dq hndl_specf_end
   348 00000078 [0C02000000000000]      dq specf_n
   349 00000080 [6801000000000000]      dq specf_o
   350 00000088 [3E00000000000000]      dq hndl_specf_end
   351 00000090 [3E00000000000000]      dq hndl_specf_end
   352 00000098 [3E00000000000000]      dq hndl_specf_end
   353 000000A0 [A101000000000000]      dq specf_s
   354 000000A8 [3E00000000000000]      dq hndl_specf_end
   355 000000B0 [3E00000000000000]      dq hndl_specf_end
   356 000000B8 [3E00000000000000]      dq hndl_specf_end
   357 000000C0 [3E00000000000000]      dq hndl_specf_end
   358 000000C8 [B701000000000000]      dq specf_x
   359                                  
   360                                  section .bss
   361                                  
   362 00000000 <res 10h>               charbuf: db CHARBUF_SIZE dup(?)
