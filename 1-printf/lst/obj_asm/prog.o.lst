     1                                  ; =======================================================================
     2                                  ; int myprintf(const char *format, ...)
     3                                  ; Supported specifiers:
     4                                  ;   - %c - one character;
     5                                  ;   - %s - a c-string;
     6                                  ;   - %% - a single '%';
     7                                  ;   - %d - decimal integer (int32_t)
     8                                  ;   - %x - hex integer (int32_t)
     9                                  ;   - %o - octal integer (int32_t)
    10                                  ;   - %b - binary integer (int32_t)
    11                                  ; =======================================================================
    12                                  
    13                                  global _Z9my_printfPKcz
    14                                  
    15                                  %define CHARBUF_SIZE 10
    16                                  
    17                                  section .text
    18                                  
    19                                  _Z9my_printfPKcz:
    20                                              ; ============================================    
    21                                              ; preparing stack frame, so that all POTENTIAL
    22                                              ; arguments are located in order in stack
    23                                  
    24 00000000 415A                                pop r10 ; saving ret code
    25                                  
    26                                              ; pushing POTENTIAL arguments in reverse order
    27 00000002 4151                                push r9
    28 00000004 4150                                push r8
    29 00000006 51                                  push rcx
    30 00000007 52                                  push rdx
    31 00000008 56                                  push rsi
    32                                  
    33 00000009 4989E3                              mov r11, rsp ; saving reference stack pointer
    34                                  
    35 0000000C 4152                                push r10 ; pushing ret code
    36                                  
    37                                              ; ============================================
    38 0000000E 53                                  push rbx
    39 0000000F 55                                  push rbp
    40 00000010 4154                                push r12
    41 00000012 4155                                push r13
    42 00000014 4156                                push r14
    43 00000016 4157                                push r15
    44                                  
    45 00000018 4C89DD                              mov rbp, r11 ; now r11 is free
    46                                  
    47                                              ; before first call of print_char
    48 0000001B 31C0                                xor eax, eax
    49 0000001D 4D31DB                              xor r11, r11
    50 00000020 4D31D2                              xor r10, r10
    51                                  
    52                                              ; =====================================
    53                                              ; main loop
    54 00000023 448A17                  main_loop:  mov r10b, [rdi]
    55 00000026 48FFC7                              inc rdi
    56                                              
    57 00000029 4180FA25                            cmp r10b, '%'
    58 0000002D 7413                                je specf
    59                                              
    60 0000002F 4180FA5C                            cmp r10b, '\'
    61 00000033 7418                                je slash
    62                                  
    63                                              ; common char or 0x0
    64 00000035 E828000000                          call print_char
    65                                  
    66 0000003A 4180FA00                            cmp r10b, 0x0
    67 0000003E 75E3                                jne main_loop
    68 00000040 EB0D                                jmp printf_end
    69                                              ; ---------------
    70                                              ; specf
    71 00000042 448A17                  specf:      mov r10b, [rdi]
    72 00000045 48FFC7                              inc rdi
    73 00000048 E85F000000                          call hndl_specf
    74                                  
    75                                              ; ---------------
    76                                              ; slash
    77                                  slash:
    78                                  
    79 0000004D EBD4                                jmp main_loop
    80                                              ; =====================================
    81                                              ; end of main_loop
    82                                  printf_end: 
    83                                  
    84 0000004F 415F                                pop r15
    85 00000051 415E                                pop r14
    86 00000053 415D                                pop r13
    87 00000055 415C                                pop r12
    88 00000057 5D                                  pop rbp
    89 00000058 5B                                  pop rbx
    90                                  
    91                                              ; ======================================
    92                                              ; fixig stack frame and ret
    93                                  
    94 00000059 415B                                pop r11         ; popping ret code
    95 0000005B 4883C428                            add rsp, 5*8    ; throwing out potential register args
    96 0000005F 4153                                push r11        ; ret code
    97 00000061 C3                                  ret
    98                                  
    99                                  ; =======================================================================
   100                                  ; print_char
   101                                  ; Description:
   102                                  ;   Gets one char, stores it into internal buffer. When it's full, calls
   103                                  ;   syscall write to stdout and resets the buffer. If given char is zero 
   104                                  ;   byte ('\0'), doesn't store it and flushes buffer immediately. 
   105                                  ;   Increments number of written bytes (see args) or sets it to -1 in 
   106                                  ;   case of writing error.
   107                                  ; Args:
   108                                  ;   - r10b - char to store to buffer and print.
   109                                  ;   - eax  - stores number of already written bytes here, or sets it to -1
   110                                  ;           in case of error.
   111                                  ; Expects: 
   112                                  ;   - r11 - index in the buffer, must be set to 0 before first call of 
   113                                  ;           this func; must not be changed outside of this func.
   114                                  ; =======================================================================
   115                                  print_char:
   116 00000062 4180FA00                            cmp r10b, 0x0
   117 00000066 7416                                je flush_buf
   118                                  
   119 00000068 83F8FF                              cmp eax, -1     ; check if error already happened
   120 0000006B 7437                                je prn_chr_end
   121                                  
   122 0000006D 458893[00000000]                    mov [charbuf + r11], r10b
   123 00000074 49FFC3                              inc r11
   124                                  
   125 00000077 4983FB0A                            cmp r11, CHARBUF_SIZE
   126 0000007B 7401                                je flush_buf
   127                                              
   128 0000007D C3                                  ret
   129                                  
   130                                  flush_buf:  
   131 0000007E 57                                  push rdi
   132 0000007F 56                                  push rsi
   133 00000080 52                                  push rdx
   134 00000081 50                                  push rax 
   135                                  
   136 00000082 4C89DA                              mov rdx, r11            ; num of bytes to write
   137 00000085 B801000000                          mov rax, 0x1            ; syscall number - write
   138 0000008A BF01000000                          mov rdi, 0x1            ; stdout
   139 0000008F 488D3425[00000000]                  lea rsi, [charbuf]      ; buffer pointer
   140 00000097 0F05                                syscall
   141                                  
   142                                              ; now eax stores -1 or number of written bytes
   143 00000099 83F8FF                              cmp eax, -1
   144 0000009C 7406                                je prn_chr_end
   145 0000009E 030424                              add eax, [rsp] ; adding to eax its previous value 
   146                                  
   147 000000A1 4D31DB                              xor r11, r11
   148                                  
   149                                  prn_chr_end: 
   150                                              ; if eax equals -1, it must be -1 still; otherwise
   151                                              ; it already has the needed value
   152 000000A4 4883C408                            add rsp, 0x8    ; skipping eax
   153                                  
   154 000000A8 5A                                  pop rdx
   155 000000A9 5E                                  pop rsi
   156 000000AA 5F                                  pop rdi
   157 000000AB C3                                  ret
   158                                  
   159                                  ; =======================================================================
   160                                  ; hndl_specf
   161                                  ; Description:
   162                                  ;   Handles situation when specifier like '%S' is met in the format 
   163                                  ;   string. 'S' fully specifier which specifier it is.
   164                                  ; Supported specifiers (case sensitive!):
   165                                  ;   - %%    - just one character '%'   - no arg;
   166                                  ;   - %c    - one character            - int8_t (char)
   167                                  ;   - %s    - C-string                 - const char *
   168                                  ;   - %d    - decimal integer          - int32_t
   169                                  ;   - %x    - hex integer              - int32_t
   170                                  ;   - %o    - octal integer            - int32_t
   171                                  ;   - %b    - binary integer           - int32_t
   172                                  ; Arguments:
   173                                  ;   - r10   - the character 'S' (see description)
   174                                  ; Expects:
   175                                  ;   - rbp - to point at the next to be used argument in stack 
   176                                  ;           (considering all args as 8 bytes)
   177                                  ; ATTENTION:
   178                                  ;   Nothing happens if the specifier is not identified.
   179                                  ; =======================================================================
   180                                  hndl_specf:
   181                                  %define SPECF_SMALLEST 'b' ; specifier with the smallest ascii value
   182                                  %define SPECF_BIGGEST  'x' ; specifier with the biggest ascii value
   183                                  
   184 000000AC 4180FA25                            cmp r10b, '%'
   185 000000B0 7420                                je specf_perc
   186                                  
   187 000000B2 4180FA78                            cmp r10b, SPECF_BIGGEST
   188 000000B6 771F                                ja hndl_specf_end       ; unrecognized, skipping
   189                                  
   190 000000B8 4180EA62                            sub r10b, SPECF_SMALLEST
   191 000000BC 42FF24D5[00000000]                  jmp [jmp_table + r10*8]
   192                                  
   193                                  specf_b:    
   194                                  
   195 000000C4 448A5500                specf_c:    mov r10b, [rbp]
   196 000000C8 E895FFFFFF                          call print_char
   197 000000CD 4883C508                            add rbp, 0x8
   198 000000D1 C3                                  ret
   199                                  
   200                                  specf_d:    
   201                                  
   202                                  specf_o:
   203                                  
   204                                  specf_s:
   205                                  
   206                                  specf_x:
   207                                  
   208 000000D2 E88BFFFFFF              specf_perc: call print_char ; just print '%', which is already in the r10b 
   209                                  
   210                                  hndl_specf_end:
   211 000000D7 C3                                  ret
   212                                  
   213                                  section .rodata
   214                                  align 8
   215                                  jmp_table:
   216 00000000 [C400000000000000]      dq specf_b
   217 00000008 [C400000000000000]      dq specf_c
   218 00000010 [D200000000000000]      dq specf_d
   219 00000018 [D700000000000000]      dq hndl_specf_end
   220 00000020 [D700000000000000]      dq hndl_specf_end
   221 00000028 [D700000000000000]      dq hndl_specf_end
   222 00000030 [D700000000000000]      dq hndl_specf_end
   223 00000038 [D700000000000000]      dq hndl_specf_end
   224 00000040 [D700000000000000]      dq hndl_specf_end
   225 00000048 [D700000000000000]      dq hndl_specf_end
   226 00000050 [D700000000000000]      dq hndl_specf_end
   227 00000058 [D700000000000000]      dq hndl_specf_end
   228 00000060 [D200000000000000]      dq specf_o
   229 00000068 [D700000000000000]      dq hndl_specf_end
   230 00000070 [D700000000000000]      dq hndl_specf_end
   231 00000078 [D700000000000000]      dq hndl_specf_end
   232 00000080 [D200000000000000]      dq specf_s
   233 00000088 [D700000000000000]      dq hndl_specf_end
   234 00000090 [D700000000000000]      dq hndl_specf_end
   235 00000098 [D700000000000000]      dq hndl_specf_end
   236 000000A0 [D700000000000000]      dq hndl_specf_end
   237 000000A8 [D200000000000000]      dq specf_x
   238                                  
   239                                  section .data
   240                                  
   241 00000000 000000000000000000-     charbuf: db CHARBUF_SIZE dup(0)
   241 00000009 00                 
